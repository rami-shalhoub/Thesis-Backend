// <auto-generated />
using System;
using Backend.data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pgvector;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ThesisDappDBContext))]
    [Migration("20250513035558_database-initialisation")]
    partial class databaseinitialisation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "vector");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.models.AccessLog", b =>
                {
                    b.Property<Guid>("logID")
                        .HasColumnType("uuid");

                    b.Property<string>("action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("documentID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("sessionID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("timeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("userID")
                        .HasColumnType("uuid");

                    b.HasKey("logID")
                        .HasName("AccessLog_pkey");

                    b.HasIndex("documentID");

                    b.HasIndex("sessionID");

                    b.HasIndex("userID");

                    b.ToTable("AccessLog");
                });

            modelBuilder.Entity("Backend.models.ContextSummary", b =>
                {
                    b.Property<Guid>("summaryID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Vector>("embedding")
                        .HasMaxLength(1536)
                        .HasColumnType("vector(1536)");

                    b.Property<Guid>("sessionID")
                        .HasColumnType("uuid");

                    b.Property<string>("summaryText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("summaryID")
                        .HasName("ContextSummary_pkey");

                    b.HasIndex("sessionID");

                    b.ToTable("ContextSummary");
                });

            modelBuilder.Entity("Backend.models.Document", b =>
                {
                    b.Property<Guid>("documentID")
                        .HasColumnType("uuid");

                    b.Property<string>("accessControl")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("blockchainTxID")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("documentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("'other'::character varying");

                    b.Property<Vector>("embedding")
                        .HasColumnType("vector");

                    b.Property<byte[]>("encryptionKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ipfsCID")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("jurisdiction")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("'GB'::character varying")
                        .HasComment("Focus on UK");

                    b.Property<Guid>("ownerID")
                        .HasColumnType("uuid");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("documentID")
                        .HasName("Document_pkey");

                    b.HasIndex("ownerID");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("Backend.models.Message", b =>
                {
                    b.Property<Guid>("messageID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("metadata")
                        .HasColumnType("jsonb");

                    b.Property<string>("prompt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("response")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("sequenceNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("sessionID")
                        .HasColumnType("uuid");

                    b.HasKey("messageID")
                        .HasName("Message_pkey");

                    b.HasIndex("sessionID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Backend.models.RevokedToken", b =>
                {
                    b.Property<string>("tokenID")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("expiry")
                        .HasColumnType("timestamp(2) without time zone");

                    b.Property<DateTime?>("revokedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("userID")
                        .HasColumnType("uuid");

                    b.HasKey("tokenID")
                        .HasName("RevokedToken_pkey");

                    b.HasIndex("userID");

                    b.ToTable("RevokedToken");
                });

            modelBuilder.Entity("Backend.models.Session", b =>
                {
                    b.Property<Guid>("sessionID")
                        .HasColumnType("uuid");

                    b.Property<string>("analysisParameter")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("contextWindow")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("documentID")
                        .HasColumnType("uuid");

                    b.Property<bool?>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("legalTopics")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("sessionTitle")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("updatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("userID")
                        .HasColumnType("uuid");

                    b.HasKey("sessionID")
                        .HasName("Session_pkey");

                    b.HasIndex("documentID");

                    b.HasIndex("userID");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Backend.models.User", b =>
                {
                    b.Property<Guid>("userID")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("createdAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("lastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp(2) without time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("organisationID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("'ClientOrgMSP'::character varying");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("hased");

                    b.Property<string>("refreshToken")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValueSql("'client'::character varying");

                    b.Property<DateTime>("tokenExpiry")
                        .HasColumnType("timestamp(2) without time zone");

                    b.HasKey("userID")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "email" }, "user_email_unique")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("Backend.models.AccessLog", b =>
                {
                    b.HasOne("Backend.models.Document", "document")
                        .WithMany("AccessLog")
                        .HasForeignKey("documentID")
                        .IsRequired()
                        .HasConstraintName("FK_accessed_documentID");

                    b.HasOne("Backend.models.Session", "session")
                        .WithMany("AccessLog")
                        .HasForeignKey("sessionID")
                        .IsRequired()
                        .HasConstraintName("FK_accessed_sessionID");

                    b.HasOne("Backend.models.User", "user")
                        .WithMany("AccessLog")
                        .HasForeignKey("userID")
                        .IsRequired()
                        .HasConstraintName("FK_accessed_userID");

                    b.Navigation("document");

                    b.Navigation("session");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.models.ContextSummary", b =>
                {
                    b.HasOne("Backend.models.Session", "session")
                        .WithMany("ContextSummary")
                        .HasForeignKey("sessionID")
                        .IsRequired()
                        .HasConstraintName("FK_summary_session");

                    b.Navigation("session");
                });

            modelBuilder.Entity("Backend.models.Document", b =>
                {
                    b.HasOne("Backend.models.User", "owner")
                        .WithMany("Document")
                        .HasForeignKey("ownerID")
                        .IsRequired()
                        .HasConstraintName("FK_document_ownerID");

                    b.Navigation("owner");
                });

            modelBuilder.Entity("Backend.models.Message", b =>
                {
                    b.HasOne("Backend.models.Session", "session")
                        .WithMany("Message")
                        .HasForeignKey("sessionID")
                        .IsRequired()
                        .HasConstraintName("FK_message_session");

                    b.Navigation("session");
                });

            modelBuilder.Entity("Backend.models.RevokedToken", b =>
                {
                    b.HasOne("Backend.models.User", "user")
                        .WithMany("RevokedToken")
                        .HasForeignKey("userID")
                        .IsRequired()
                        .HasConstraintName("FK_userID_revoked_token");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.models.Session", b =>
                {
                    b.HasOne("Backend.models.Document", "document")
                        .WithMany("Session")
                        .HasForeignKey("documentID")
                        .HasConstraintName("FK_session_documentID");

                    b.HasOne("Backend.models.User", "user")
                        .WithMany("Session")
                        .HasForeignKey("userID")
                        .IsRequired()
                        .HasConstraintName("FK_session_userID");

                    b.Navigation("document");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Backend.models.Document", b =>
                {
                    b.Navigation("AccessLog");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Backend.models.Session", b =>
                {
                    b.Navigation("AccessLog");

                    b.Navigation("ContextSummary");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Backend.models.User", b =>
                {
                    b.Navigation("AccessLog");

                    b.Navigation("Document");

                    b.Navigation("RevokedToken");

                    b.Navigation("Session");
                });
#pragma warning restore 612, 618
        }
    }
}
